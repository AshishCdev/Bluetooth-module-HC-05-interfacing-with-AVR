
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000770  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000070  00800060  00000770  00000804  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000d0  008000d0  00000874  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ee4  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000629  00000000  00000000  000018a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000621  00000000  00000000  00001ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000310  00000000  00000000  000024f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ab  00000000  00000000  00002804  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c06  00000000  00000000  00002baf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  000037b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e7       	ldi	r30, 0x70	; 112
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3d       	cpi	r26, 0xD0	; 208
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ed       	ldi	r26, 0xD0	; 208
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3d       	cpi	r26, 0xD4	; 212
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 25 01 	call	0x24a	; 0x24a <main>
  8a:	0c 94 b6 03 	jmp	0x76c	; 0x76c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ret_res>:
typedef struct  
{
	char *dis;
}states;

char ret_res(char*str ){
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	ec 01       	movw	r28, r24
	if(!strcmp(str,"fan")) return 2;
  98:	66 e6       	ldi	r22, 0x66	; 102
  9a:	70 e0       	ldi	r23, 0x00	; 0
  9c:	0e 94 ad 03 	call	0x75a	; 0x75a <strcmp>
  a0:	89 2b       	or	r24, r25
  a2:	31 f1       	breq	.+76     	; 0xf0 <ret_res+0x5e>
	else if(!strcmp(str,"aco")) return 4;
  a4:	6a e6       	ldi	r22, 0x6A	; 106
  a6:	70 e0       	ldi	r23, 0x00	; 0
  a8:	ce 01       	movw	r24, r28
  aa:	0e 94 ad 03 	call	0x75a	; 0x75a <strcmp>
  ae:	89 2b       	or	r24, r25
  b0:	09 f1       	breq	.+66     	; 0xf4 <ret_res+0x62>
	else if(!strcmp(str,"mc")) return 0;
  b2:	6e e6       	ldi	r22, 0x6E	; 110
  b4:	70 e0       	ldi	r23, 0x00	; 0
  b6:	ce 01       	movw	r24, r28
  b8:	0e 94 ad 03 	call	0x75a	; 0x75a <strcmp>
  bc:	89 2b       	or	r24, r25
  be:	e1 f0       	breq	.+56     	; 0xf8 <ret_res+0x66>
	else if(!strcmp(str,"mac")) return 0;
  c0:	61 e7       	ldi	r22, 0x71	; 113
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	ce 01       	movw	r24, r28
  c6:	0e 94 ad 03 	call	0x75a	; 0x75a <strcmp>
  ca:	89 2b       	or	r24, r25
  cc:	b9 f0       	breq	.+46     	; 0xfc <ret_res+0x6a>
	else if(!strcmp(str,"tv")) return 3;
  ce:	65 e7       	ldi	r22, 0x75	; 117
  d0:	70 e0       	ldi	r23, 0x00	; 0
  d2:	ce 01       	movw	r24, r28
  d4:	0e 94 ad 03 	call	0x75a	; 0x75a <strcmp>
  d8:	89 2b       	or	r24, r25
  da:	91 f0       	breq	.+36     	; 0x100 <ret_res+0x6e>
	else if(!strcmp(str,"bulb1")) return 1;
  dc:	68 e7       	ldi	r22, 0x78	; 120
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	ce 01       	movw	r24, r28
  e2:	0e 94 ad 03 	call	0x75a	; 0x75a <strcmp>
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	89 2b       	or	r24, r25
  ea:	59 f0       	breq	.+22     	; 0x102 <ret_res+0x70>
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	09 c0       	rjmp	.+18     	; 0x102 <ret_res+0x70>
{
	char *dis;
}states;

char ret_res(char*str ){
	if(!strcmp(str,"fan")) return 2;
  f0:	22 e0       	ldi	r18, 0x02	; 2
  f2:	07 c0       	rjmp	.+14     	; 0x102 <ret_res+0x70>
	else if(!strcmp(str,"aco")) return 4;
  f4:	24 e0       	ldi	r18, 0x04	; 4
  f6:	05 c0       	rjmp	.+10     	; 0x102 <ret_res+0x70>
	else if(!strcmp(str,"mc")) return 0;
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	03 c0       	rjmp	.+6      	; 0x102 <ret_res+0x70>
	else if(!strcmp(str,"mac")) return 0;
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	01 c0       	rjmp	.+2      	; 0x102 <ret_res+0x70>
	else if(!strcmp(str,"tv")) return 3;
 100:	23 e0       	ldi	r18, 0x03	; 3
	else if(!strcmp(str,"bulb1")) return 1;
	else if(!strcmp(str,"bulb2")) return 0;
	else if(!strcmp(str,"bulb3")) return 0;
	else if(!strcmp(str,"moff")) return 0;
	else return 0;
}
 102:	82 2f       	mov	r24, r18
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <set_op_value>:
void set_op_value(char cas){
	switch(cas){
 10a:	82 30       	cpi	r24, 0x02	; 2
 10c:	71 f0       	breq	.+28     	; 0x12a <set_op_value+0x20>
 10e:	18 f4       	brcc	.+6      	; 0x116 <set_op_value+0xc>
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	31 f0       	breq	.+12     	; 0x120 <set_op_value+0x16>
 114:	19 c0       	rjmp	.+50     	; 0x148 <set_op_value+0x3e>
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	69 f0       	breq	.+26     	; 0x134 <set_op_value+0x2a>
 11a:	84 30       	cpi	r24, 0x04	; 4
 11c:	81 f0       	breq	.+32     	; 0x13e <set_op_value+0x34>
 11e:	14 c0       	rjmp	.+40     	; 0x148 <set_op_value+0x3e>
		case 1 :op^=(1<<(cas-1));break;
 120:	9b b3       	in	r25, 0x1b	; 27
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	89 27       	eor	r24, r25
 126:	8b bb       	out	0x1b, r24	; 27
 128:	08 95       	ret
		case 2 :op^=(1<<(cas-1));break;
 12a:	9b b3       	in	r25, 0x1b	; 27
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	89 27       	eor	r24, r25
 130:	8b bb       	out	0x1b, r24	; 27
 132:	08 95       	ret
		case 3 :op^=(1<<(cas-1));break;
 134:	9b b3       	in	r25, 0x1b	; 27
 136:	84 e0       	ldi	r24, 0x04	; 4
 138:	89 27       	eor	r24, r25
 13a:	8b bb       	out	0x1b, r24	; 27
 13c:	08 95       	ret
		case 4 :op^=(1<<(cas-1));break;
 13e:	9b b3       	in	r25, 0x1b	; 27
 140:	88 e0       	ldi	r24, 0x08	; 8
 142:	89 27       	eor	r24, r25
 144:	8b bb       	out	0x1b, r24	; 27
 146:	08 95       	ret
		default:op=0; 
 148:	1b ba       	out	0x1b, r1	; 27
 14a:	08 95       	ret

0000014c <display>:
	}
}

void display(void){
 14c:	af 92       	push	r10
 14e:	bf 92       	push	r11
 150:	cf 92       	push	r12
 152:	df 92       	push	r13
 154:	ef 92       	push	r14
 156:	ff 92       	push	r15
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	00 d0       	rcall	.+0      	; 0x162 <display+0x16>
 162:	00 d0       	rcall	.+0      	; 0x164 <display+0x18>
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
	states two[]={
 168:	8e e7       	ldi	r24, 0x7E	; 126
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	9a 83       	std	Y+2, r25	; 0x02
 16e:	89 83       	std	Y+1, r24	; 0x01
 170:	82 e8       	ldi	r24, 0x82	; 130
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	9c 83       	std	Y+4, r25	; 0x04
 176:	8b 83       	std	Y+3, r24	; 0x03
		{"OFF"},
		{"ON "}
	};
	lcd_clrscr();
 178:	0e 94 cf 01 	call	0x39e	; 0x39e <lcd_clrscr>
	lcd_puts("BULB=");
 17c:	86 e8       	ldi	r24, 0x86	; 134
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <lcd_puts>
	lcd_puts(two[(op&(1<<bulb))].dis);
 184:	8b b3       	in	r24, 0x1b	; 27
 186:	80 fb       	bst	r24, 0
 188:	aa 24       	eor	r10, r10
 18a:	a0 f8       	bld	r10, 0
 18c:	b1 2c       	mov	r11, r1
 18e:	f5 01       	movw	r30, r10
 190:	ee 0f       	add	r30, r30
 192:	ff 1f       	adc	r31, r31
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	8c 0f       	add	r24, r28
 19a:	9d 1f       	adc	r25, r29
 19c:	e8 0f       	add	r30, r24
 19e:	f9 1f       	adc	r31, r25
 1a0:	80 81       	ld	r24, Z
 1a2:	91 81       	ldd	r25, Z+1	; 0x01
 1a4:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <lcd_puts>
	lcd_puts(" FAN=");
 1a8:	8c e8       	ldi	r24, 0x8C	; 140
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <lcd_puts>
	lcd_puts(two[((op&(1<<fan))>>fan)].dis);
 1b0:	8b b3       	in	r24, 0x1b	; 27
 1b2:	81 fb       	bst	r24, 1
 1b4:	cc 24       	eor	r12, r12
 1b6:	c0 f8       	bld	r12, 0
 1b8:	d1 2c       	mov	r13, r1
 1ba:	f6 01       	movw	r30, r12
 1bc:	ee 0f       	add	r30, r30
 1be:	ff 1f       	adc	r31, r31
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	8c 0f       	add	r24, r28
 1c6:	9d 1f       	adc	r25, r29
 1c8:	e8 0f       	add	r30, r24
 1ca:	f9 1f       	adc	r31, r25
 1cc:	80 81       	ld	r24, Z
 1ce:	91 81       	ldd	r25, Z+1	; 0x01
 1d0:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <lcd_puts>
	lcd_puts("\nTV=");
 1d4:	82 e9       	ldi	r24, 0x92	; 146
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <lcd_puts>
	lcd_puts(two[((op&(1<<tv))>>tv)].dis);
 1dc:	8b b3       	in	r24, 0x1b	; 27
 1de:	82 fb       	bst	r24, 2
 1e0:	ee 24       	eor	r14, r14
 1e2:	e0 f8       	bld	r14, 0
 1e4:	f1 2c       	mov	r15, r1
 1e6:	f7 01       	movw	r30, r14
 1e8:	ee 0f       	add	r30, r30
 1ea:	ff 1f       	adc	r31, r31
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	8c 0f       	add	r24, r28
 1f2:	9d 1f       	adc	r25, r29
 1f4:	e8 0f       	add	r30, r24
 1f6:	f9 1f       	adc	r31, r25
 1f8:	80 81       	ld	r24, Z
 1fa:	91 81       	ldd	r25, Z+1	; 0x01
 1fc:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <lcd_puts>
	lcd_puts("   AC=");
 200:	87 e9       	ldi	r24, 0x97	; 151
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <lcd_puts>
	lcd_puts(two[((op&(1<<AC))>>AC)].dis);
 208:	8b b3       	in	r24, 0x1b	; 27
 20a:	83 fb       	bst	r24, 3
 20c:	00 27       	eor	r16, r16
 20e:	00 f9       	bld	r16, 0
 210:	10 e0       	ldi	r17, 0x00	; 0
 212:	f8 01       	movw	r30, r16
 214:	ee 0f       	add	r30, r30
 216:	ff 1f       	adc	r31, r31
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	8c 0f       	add	r24, r28
 21e:	9d 1f       	adc	r25, r29
 220:	e8 0f       	add	r30, r24
 222:	f9 1f       	adc	r31, r25
 224:	80 81       	ld	r24, Z
 226:	91 81       	ldd	r25, Z+1	; 0x01
 228:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <lcd_puts>
}
 22c:	0f 90       	pop	r0
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	0f 90       	pop	r0
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	ff 90       	pop	r15
 23e:	ef 90       	pop	r14
 240:	df 90       	pop	r13
 242:	cf 90       	pop	r12
 244:	bf 90       	pop	r11
 246:	af 90       	pop	r10
 248:	08 95       	ret

0000024a <main>:
int main(void){
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
	DDRA=0xff;
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	8a bb       	out	0x1a, r24	; 26
	lcd_init(LCD_DISP_ON);
 254:	8c e0       	ldi	r24, 0x0C	; 12
 256:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_init>
	lcd_puts("     Welcome");
 25a:	8e e9       	ldi	r24, 0x9E	; 158
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 262:	2f ef       	ldi	r18, 0xFF	; 255
 264:	8f e9       	ldi	r24, 0x9F	; 159
 266:	97 e1       	ldi	r25, 0x17	; 23
 268:	21 50       	subi	r18, 0x01	; 1
 26a:	80 40       	sbci	r24, 0x00	; 0
 26c:	90 40       	sbci	r25, 0x00	; 0
 26e:	e1 f7       	brne	.-8      	; 0x268 <main+0x1e>
 270:	00 c0       	rjmp	.+0      	; 0x272 <main+0x28>
 272:	00 00       	nop
	_delay_ms(700);
	const static int strSize = 10;				//size for receiving string 
	char * string = 0;							//target string	
	char response=0;							//after compare the string the int would have a value
	serial_init();								//uart at baud 38400
 274:	0e 94 30 02 	call	0x460	; 0x460 <serial_init>
	lcd_init(LCD_DISP_ON);
	lcd_puts("     Welcome");
	_delay_ms(700);
	const static int strSize = 10;				//size for receiving string 
	char * string = 0;							//target string	
	char response=0;							//after compare the string the int would have a value
 278:	10 e0       	ldi	r17, 0x00	; 0
	serial_init();								//uart at baud 38400
	while(1){
	set_op_value(response);
 27a:	81 2f       	mov	r24, r17
 27c:	0e 94 85 00 	call	0x10a	; 0x10a <set_op_value>
	display();
 280:	0e 94 a6 00 	call	0x14c	; 0x14c <display>
	string = malloc( strSize * sizeof(char) );	//allocating space in mamory heap
 284:	8a e0       	ldi	r24, 0x0A	; 10
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 86 02 	call	0x50c	; 0x50c <malloc>
 28c:	ec 01       	movw	r28, r24
	if(string == 0) {							//if memory is not available
 28e:	00 97       	sbiw	r24, 0x00	; 0
 290:	59 f0       	breq	.+22     	; 0x2a8 <main+0x5e>
		lcd_puts("can't alloc mem!\n");			
		return 1;
	}
	
	else{													//if memory is free
	response=ret_res(make_str(strSize,string));				//compare the received string to ans 
 292:	bc 01       	movw	r22, r24
 294:	8a e0       	ldi	r24, 0x0A	; 10
 296:	0e 94 41 02 	call	0x482	; 0x482 <make_str>
 29a:	0e 94 49 00 	call	0x92	; 0x92 <ret_res>
 29e:	18 2f       	mov	r17, r24
	free(string);											//free that allocated space
 2a0:	ce 01       	movw	r24, r28
 2a2:	0e 94 1e 03 	call	0x63c	; 0x63c <free>
	string = 0;												//not necessary but good idea
	 }
	}
 2a6:	e9 cf       	rjmp	.-46     	; 0x27a <main+0x30>
	while(1){
	set_op_value(response);
	display();
	string = malloc( strSize * sizeof(char) );	//allocating space in mamory heap
	if(string == 0) {							//if memory is not available
		lcd_clrscr();
 2a8:	0e 94 cf 01 	call	0x39e	; 0x39e <lcd_clrscr>
		lcd_puts("can't alloc mem!\n");			
 2ac:	8b ea       	ldi	r24, 0xAB	; 171
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <lcd_puts>
	free(string);											//free that allocated space
	string = 0;												//not necessary but good idea
	 }
	}
	return 0 ;
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	08 95       	ret

000002c0 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 2c0:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <toggle_e+0x4>
    lcd_e_low();
 2c4:	c2 98       	cbi	0x18, 2	; 24
 2c6:	08 95       	ret

000002c8 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 2c8:	cf 93       	push	r28
 2ca:	c8 2f       	mov	r28, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 2cc:	66 23       	and	r22, r22
 2ce:	11 f0       	breq	.+4      	; 0x2d4 <lcd_write+0xc>
       lcd_rs_high();
 2d0:	c0 9a       	sbi	0x18, 0	; 24
 2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <lcd_write+0xe>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 2d4:	c0 98       	cbi	0x18, 0	; 24
    }
    lcd_rw_low();
 2d6:	c1 98       	cbi	0x18, 1	; 24
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 2d8:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 2da:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 2dc:	be 9a       	sbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 2de:	bf 9a       	sbi	0x17, 7	; 23
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 2e0:	c7 98       	cbi	0x18, 7	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 2e2:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 2e4:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 2e6:	c4 98       	cbi	0x18, 4	; 24
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 2e8:	cc 23       	and	r28, r28
 2ea:	0c f4       	brge	.+2      	; 0x2ee <lcd_write+0x26>
 2ec:	c7 9a       	sbi	0x18, 7	; 24
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 2ee:	c6 fd       	sbrc	r28, 6
 2f0:	c6 9a       	sbi	0x18, 6	; 24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 2f2:	c5 fd       	sbrc	r28, 5
 2f4:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 2f6:	c4 fd       	sbrc	r28, 4
 2f8:	c4 9a       	sbi	0x18, 4	; 24
        lcd_e_toggle();
 2fa:	0e 94 60 01 	call	0x2c0	; 0x2c0 <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 2fe:	c7 98       	cbi	0x18, 7	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 300:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 302:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 304:	c4 98       	cbi	0x18, 4	; 24
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 306:	c3 fd       	sbrc	r28, 3
 308:	c7 9a       	sbi	0x18, 7	; 24
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 30a:	c2 fd       	sbrc	r28, 2
 30c:	c6 9a       	sbi	0x18, 6	; 24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 30e:	c1 fd       	sbrc	r28, 1
 310:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 312:	c0 fd       	sbrc	r28, 0
 314:	c4 9a       	sbi	0x18, 4	; 24
        lcd_e_toggle();        
 316:	0e 94 60 01 	call	0x2c0	; 0x2c0 <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 31a:	c4 9a       	sbi	0x18, 4	; 24
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 31c:	c5 9a       	sbi	0x18, 5	; 24
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 31e:	c6 9a       	sbi	0x18, 6	; 24
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 320:	c7 9a       	sbi	0x18, 7	; 24
    }
}
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
 326:	88 23       	and	r24, r24
 328:	11 f0       	breq	.+4      	; 0x32e <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
 32a:	c0 9a       	sbi	0x18, 0	; 24
 32c:	01 c0       	rjmp	.+2      	; 0x330 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 32e:	c0 98       	cbi	0x18, 0	; 24
    lcd_rw_high();                           /* RW=1  read mode      */
 330:	c1 9a       	sbi	0x18, 1	; 24
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 332:	bc 98       	cbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 334:	bd 98       	cbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 336:	be 98       	cbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 338:	bf 98       	cbi	0x17, 7	; 23
                
        /* read high nibble first */
        lcd_e_high();
 33a:	c2 9a       	sbi	0x18, 2	; 24
        lcd_e_delay();        
 33c:	00 c0       	rjmp	.+0      	; 0x33e <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 33e:	b4 99       	sbic	0x16, 4	; 22
 340:	02 c0       	rjmp	.+4      	; 0x346 <lcd_read+0x20>
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	01 c0       	rjmp	.+2      	; 0x348 <lcd_read+0x22>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 346:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 348:	b5 99       	sbic	0x16, 5	; 22
 34a:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 34c:	b6 99       	sbic	0x16, 6	; 22
 34e:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 350:	b7 99       	sbic	0x16, 7	; 22
 352:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 354:	c2 98       	cbi	0x18, 2	; 24

        lcd_e_delay();                       /* Enable 500ns low       */
 356:	00 c0       	rjmp	.+0      	; 0x358 <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
 358:	c2 9a       	sbi	0x18, 2	; 24
        lcd_e_delay();
 35a:	00 c0       	rjmp	.+0      	; 0x35c <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 35c:	b4 99       	sbic	0x16, 4	; 22
 35e:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 360:	b5 99       	sbic	0x16, 5	; 22
 362:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 364:	b6 99       	sbic	0x16, 6	; 22
 366:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 368:	b7 99       	sbic	0x16, 7	; 22
 36a:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 36c:	c2 98       	cbi	0x18, 2	; 24
    }
    return data;
}
 36e:	08 95       	ret

00000370 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	0e 94 93 01 	call	0x326	; 0x326 <lcd_read>
 376:	88 23       	and	r24, r24
 378:	dc f3       	brlt	.-10     	; 0x370 <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 37a:	85 e0       	ldi	r24, 0x05	; 5
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 93 01 	call	0x326	; 0x326 <lcd_read>
    
}/* lcd_waitbusy */
 388:	08 95       	ret

0000038a <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 38a:	cf 93       	push	r28
 38c:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 38e:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_waitbusy>
    lcd_write(cmd,0);
 392:	60 e0       	ldi	r22, 0x00	; 0
 394:	8c 2f       	mov	r24, r28
 396:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_write>
}
 39a:	cf 91       	pop	r28
 39c:	08 95       	ret

0000039e <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	0e 94 c5 01 	call	0x38a	; 0x38a <lcd_command>
 3a4:	08 95       	ret

000003a6 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 3a6:	cf 93       	push	r28
 3a8:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 3aa:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_waitbusy>
    if (c=='\n')
 3ae:	ca 30       	cpi	r28, 0x0A	; 10
 3b0:	49 f4       	brne	.+18     	; 0x3c4 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 3b2:	80 34       	cpi	r24, 0x40	; 64
 3b4:	10 f4       	brcc	.+4      	; 0x3ba <lcd_putc+0x14>
        addressCounter = LCD_START_LINE2;
 3b6:	80 e4       	ldi	r24, 0x40	; 64
 3b8:	01 c0       	rjmp	.+2      	; 0x3bc <lcd_putc+0x16>
    else
        addressCounter = LCD_START_LINE1;
 3ba:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 3bc:	80 58       	subi	r24, 0x80	; 128
 3be:	0e 94 c5 01 	call	0x38a	; 0x38a <lcd_command>
 3c2:	04 c0       	rjmp	.+8      	; 0x3cc <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 3c4:	61 e0       	ldi	r22, 0x01	; 1
 3c6:	8c 2f       	mov	r24, r28
 3c8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_write>
    }

}/* lcd_putc */
 3cc:	cf 91       	pop	r28
 3ce:	08 95       	ret

000003d0 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
 3d4:	ec 01       	movw	r28, r24
 3d6:	21 96       	adiw	r28, 0x01	; 1
 3d8:	fc 01       	movw	r30, r24
 3da:	80 81       	ld	r24, Z
 3dc:	88 23       	and	r24, r24
 3de:	29 f0       	breq	.+10     	; 0x3ea <lcd_puts+0x1a>
        lcd_putc(c);
 3e0:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 3e4:	89 91       	ld	r24, Y+
 3e6:	81 11       	cpse	r24, r1
 3e8:	fb cf       	rjmp	.-10     	; 0x3e0 <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	08 95       	ret

000003f0 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 3f0:	cf 93       	push	r28
 3f2:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 3f4:	b8 9a       	sbi	0x17, 0	; 23
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 3f6:	b9 9a       	sbi	0x17, 1	; 23
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 3f8:	ba 9a       	sbi	0x17, 2	; 23
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 3fa:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 3fc:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 3fe:	be 9a       	sbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 400:	bf 9a       	sbi	0x17, 7	; 23
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 402:	e0 ec       	ldi	r30, 0xC0	; 192
 404:	fc ea       	ldi	r31, 0xAC	; 172
 406:	31 97       	sbiw	r30, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 40a:	c5 9a       	sbi	0x18, 5	; 24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 40c:	c4 9a       	sbi	0x18, 4	; 24
    lcd_e_toggle();
 40e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 412:	e5 ee       	ldi	r30, 0xE5	; 229
 414:	f5 e3       	ldi	r31, 0x35	; 53
 416:	31 97       	sbiw	r30, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <lcd_init+0x26>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 41a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 41e:	e0 eb       	ldi	r30, 0xB0	; 176
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	31 97       	sbiw	r30, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <lcd_init+0x32>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 426:	0e 94 60 01 	call	0x2c0	; 0x2c0 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 42a:	e0 eb       	ldi	r30, 0xB0	; 176
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	31 97       	sbiw	r30, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <lcd_init+0x3e>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 432:	c4 98       	cbi	0x18, 4	; 24
    lcd_e_toggle();
 434:	0e 94 60 01 	call	0x2c0	; 0x2c0 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 438:	e0 eb       	ldi	r30, 0xB0	; 176
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	31 97       	sbiw	r30, 0x01	; 1
 43e:	f1 f7       	brne	.-4      	; 0x43c <lcd_init+0x4c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 440:	88 e2       	ldi	r24, 0x28	; 40
 442:	0e 94 c5 01 	call	0x38a	; 0x38a <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 446:	88 e0       	ldi	r24, 0x08	; 8
 448:	0e 94 c5 01 	call	0x38a	; 0x38a <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 44c:	0e 94 cf 01 	call	0x39e	; 0x39e <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 450:	86 e0       	ldi	r24, 0x06	; 6
 452:	0e 94 c5 01 	call	0x38a	; 0x38a <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 456:	8c 2f       	mov	r24, r28
 458:	0e 94 c5 01 	call	0x38a	; 0x38a <lcd_command>

}/* lcd_init */
 45c:	cf 91       	pop	r28
 45e:	08 95       	ret

00000460 <serial_init>:
#include "USART.h"



void serial_init(){
		UCSRB=(1<<TXEN)|(1<<RXEN);		
 460:	88 e1       	ldi	r24, 0x18	; 24
 462:	8a b9       	out	0x0a, r24	; 10
		UCSRC=(1<<UCSZ1)|(1<<UCSZ0)|(1<<URSEL);
 464:	86 e8       	ldi	r24, 0x86	; 134
 466:	80 bd       	out	0x20, r24	; 32
		UBRRL=17;                                  ///38400   baudrate at xtal 11.0592Mhz	
 468:	81 e1       	ldi	r24, 0x11	; 17
 46a:	89 b9       	out	0x09, r24	; 9
 46c:	08 95       	ret

0000046e <serial_Erase_all>:
	UDR=byte;
}

void serial_Erase_all(void){
	unsigned char trash=0;
	while (UCSRA & (1<<RXC)){ 
 46e:	5f 9b       	sbis	0x0b, 7	; 11
 470:	03 c0       	rjmp	.+6      	; 0x478 <serial_Erase_all+0xa>
	trash=UDR;
 472:	8c b1       	in	r24, 0x0c	; 12
	UDR=byte;
}

void serial_Erase_all(void){
	unsigned char trash=0;
	while (UCSRA & (1<<RXC)){ 
 474:	5f 99       	sbic	0x0b, 7	; 11
 476:	fd cf       	rjmp	.-6      	; 0x472 <serial_Erase_all+0x4>
 478:	08 95       	ret

0000047a <serial_read_byte>:
	}
}

unsigned char serial_read_byte(void)
{
	while (!(UCSRA&(1<<RXC)));
 47a:	5f 9b       	sbis	0x0b, 7	; 11
 47c:	fe cf       	rjmp	.-4      	; 0x47a <serial_read_byte>
	return UDR;
 47e:	8c b1       	in	r24, 0x0c	; 12
}
 480:	08 95       	ret

00000482 <make_str>:
	}
	if (flag==1)ret=(ret*(-1));
	return ret;	
}

char *make_str(uint8_t size,char *target_loc){
 482:	ef 92       	push	r14
 484:	ff 92       	push	r15
 486:	0f 93       	push	r16
 488:	1f 93       	push	r17
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	e8 2e       	mov	r14, r24
 490:	eb 01       	movw	r28, r22
	unsigned char i=1,dummy=0;
	do 
	{
		dummy=serial_read_byte();
 492:	0e 94 3d 02 	call	0x47a	; 0x47a <serial_read_byte>
	} while ((dummy<33)||(dummy>126));
 496:	9f ed       	ldi	r25, 0xDF	; 223
 498:	98 0f       	add	r25, r24
 49a:	9e 35       	cpi	r25, 0x5E	; 94
 49c:	d0 f7       	brcc	.-12     	; 0x492 <make_str+0x10>
	target_loc[0]=dummy;
 49e:	88 83       	st	Y, r24
	if (flag==1)ret=(ret*(-1));
	return ret;	
}

char *make_str(uint8_t size,char *target_loc){
	unsigned char i=1,dummy=0;
 4a0:	ff 24       	eor	r15, r15
 4a2:	f3 94       	inc	r15
	{
		dummy=serial_read_byte();
	} while ((dummy<33)||(dummy>126));
	target_loc[0]=dummy;
	do{
		target_loc[i]=serial_read_byte();
 4a4:	8e 01       	movw	r16, r28
 4a6:	0f 0d       	add	r16, r15
 4a8:	11 1d       	adc	r17, r1
 4aa:	0e 94 3d 02 	call	0x47a	; 0x47a <serial_read_byte>
 4ae:	f8 01       	movw	r30, r16
 4b0:	80 83       	st	Z, r24
		++i;
 4b2:	f3 94       	inc	r15
	} while ((i!=size)&&(target_loc[i-1]!='\n'));
 4b4:	fe 14       	cp	r15, r14
 4b6:	41 f0       	breq	.+16     	; 0x4c8 <make_str+0x46>
 4b8:	fe 01       	movw	r30, r28
 4ba:	ef 0d       	add	r30, r15
 4bc:	f1 1d       	adc	r31, r1
 4be:	31 97       	sbiw	r30, 0x01	; 1
 4c0:	90 81       	ld	r25, Z
 4c2:	9a 30       	cpi	r25, 0x0A	; 10
 4c4:	79 f7       	brne	.-34     	; 0x4a4 <make_str+0x22>
 4c6:	15 c0       	rjmp	.+42     	; 0x4f2 <make_str+0x70>
	if (target_loc[i-1]=='\n'){
 4c8:	ef 2d       	mov	r30, r15
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	31 97       	sbiw	r30, 0x01	; 1
 4ce:	ec 0f       	add	r30, r28
 4d0:	fd 1f       	adc	r31, r29
 4d2:	80 81       	ld	r24, Z
 4d4:	8a 30       	cpi	r24, 0x0A	; 10
 4d6:	29 f4       	brne	.+10     	; 0x4e2 <make_str+0x60>
		target_loc[i-1]='\0';
 4d8:	10 82       	st	Z, r1
		serial_Erase_all();
 4da:	0e 94 37 02 	call	0x46e	; 0x46e <serial_Erase_all>
		return target_loc;
 4de:	ce 01       	movw	r24, r28
 4e0:	0e c0       	rjmp	.+28     	; 0x4fe <make_str+0x7c>
	}
	else {
		free(target_loc);
 4e2:	ce 01       	movw	r24, r28
 4e4:	0e 94 1e 03 	call	0x63c	; 0x63c <free>
		serial_Erase_all();
 4e8:	0e 94 37 02 	call	0x46e	; 0x46e <serial_Erase_all>
		return "less memory error";
 4ec:	8d eb       	ldi	r24, 0xBD	; 189
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	06 c0       	rjmp	.+12     	; 0x4fe <make_str+0x7c>
	target_loc[0]=dummy;
	do{
		target_loc[i]=serial_read_byte();
		++i;
	} while ((i!=size)&&(target_loc[i-1]!='\n'));
	if (target_loc[i-1]=='\n'){
 4f2:	ef 2d       	mov	r30, r15
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	31 97       	sbiw	r30, 0x01	; 1
 4f8:	ec 0f       	add	r30, r28
 4fa:	fd 1f       	adc	r31, r29
 4fc:	ed cf       	rjmp	.-38     	; 0x4d8 <make_str+0x56>
	else {
		free(target_loc);
		serial_Erase_all();
		return "less memory error";
	}
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	1f 91       	pop	r17
 504:	0f 91       	pop	r16
 506:	ff 90       	pop	r15
 508:	ef 90       	pop	r14
 50a:	08 95       	ret

0000050c <malloc>:
 50c:	cf 93       	push	r28
 50e:	df 93       	push	r29
 510:	82 30       	cpi	r24, 0x02	; 2
 512:	91 05       	cpc	r25, r1
 514:	10 f4       	brcc	.+4      	; 0x51a <malloc+0xe>
 516:	82 e0       	ldi	r24, 0x02	; 2
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	e0 91 d2 00 	lds	r30, 0x00D2
 51e:	f0 91 d3 00 	lds	r31, 0x00D3
 522:	20 e0       	ldi	r18, 0x00	; 0
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	a0 e0       	ldi	r26, 0x00	; 0
 528:	b0 e0       	ldi	r27, 0x00	; 0
 52a:	30 97       	sbiw	r30, 0x00	; 0
 52c:	39 f1       	breq	.+78     	; 0x57c <malloc+0x70>
 52e:	40 81       	ld	r20, Z
 530:	51 81       	ldd	r21, Z+1	; 0x01
 532:	48 17       	cp	r20, r24
 534:	59 07       	cpc	r21, r25
 536:	b8 f0       	brcs	.+46     	; 0x566 <malloc+0x5a>
 538:	48 17       	cp	r20, r24
 53a:	59 07       	cpc	r21, r25
 53c:	71 f4       	brne	.+28     	; 0x55a <malloc+0x4e>
 53e:	82 81       	ldd	r24, Z+2	; 0x02
 540:	93 81       	ldd	r25, Z+3	; 0x03
 542:	10 97       	sbiw	r26, 0x00	; 0
 544:	29 f0       	breq	.+10     	; 0x550 <malloc+0x44>
 546:	13 96       	adiw	r26, 0x03	; 3
 548:	9c 93       	st	X, r25
 54a:	8e 93       	st	-X, r24
 54c:	12 97       	sbiw	r26, 0x02	; 2
 54e:	2c c0       	rjmp	.+88     	; 0x5a8 <malloc+0x9c>
 550:	90 93 d3 00 	sts	0x00D3, r25
 554:	80 93 d2 00 	sts	0x00D2, r24
 558:	27 c0       	rjmp	.+78     	; 0x5a8 <malloc+0x9c>
 55a:	21 15       	cp	r18, r1
 55c:	31 05       	cpc	r19, r1
 55e:	31 f0       	breq	.+12     	; 0x56c <malloc+0x60>
 560:	42 17       	cp	r20, r18
 562:	53 07       	cpc	r21, r19
 564:	18 f0       	brcs	.+6      	; 0x56c <malloc+0x60>
 566:	a9 01       	movw	r20, r18
 568:	db 01       	movw	r26, r22
 56a:	01 c0       	rjmp	.+2      	; 0x56e <malloc+0x62>
 56c:	ef 01       	movw	r28, r30
 56e:	9a 01       	movw	r18, r20
 570:	bd 01       	movw	r22, r26
 572:	df 01       	movw	r26, r30
 574:	02 80       	ldd	r0, Z+2	; 0x02
 576:	f3 81       	ldd	r31, Z+3	; 0x03
 578:	e0 2d       	mov	r30, r0
 57a:	d7 cf       	rjmp	.-82     	; 0x52a <malloc+0x1e>
 57c:	21 15       	cp	r18, r1
 57e:	31 05       	cpc	r19, r1
 580:	f9 f0       	breq	.+62     	; 0x5c0 <malloc+0xb4>
 582:	28 1b       	sub	r18, r24
 584:	39 0b       	sbc	r19, r25
 586:	24 30       	cpi	r18, 0x04	; 4
 588:	31 05       	cpc	r19, r1
 58a:	80 f4       	brcc	.+32     	; 0x5ac <malloc+0xa0>
 58c:	8a 81       	ldd	r24, Y+2	; 0x02
 58e:	9b 81       	ldd	r25, Y+3	; 0x03
 590:	61 15       	cp	r22, r1
 592:	71 05       	cpc	r23, r1
 594:	21 f0       	breq	.+8      	; 0x59e <malloc+0x92>
 596:	fb 01       	movw	r30, r22
 598:	93 83       	std	Z+3, r25	; 0x03
 59a:	82 83       	std	Z+2, r24	; 0x02
 59c:	04 c0       	rjmp	.+8      	; 0x5a6 <malloc+0x9a>
 59e:	90 93 d3 00 	sts	0x00D3, r25
 5a2:	80 93 d2 00 	sts	0x00D2, r24
 5a6:	fe 01       	movw	r30, r28
 5a8:	32 96       	adiw	r30, 0x02	; 2
 5aa:	44 c0       	rjmp	.+136    	; 0x634 <malloc+0x128>
 5ac:	fe 01       	movw	r30, r28
 5ae:	e2 0f       	add	r30, r18
 5b0:	f3 1f       	adc	r31, r19
 5b2:	81 93       	st	Z+, r24
 5b4:	91 93       	st	Z+, r25
 5b6:	22 50       	subi	r18, 0x02	; 2
 5b8:	31 09       	sbc	r19, r1
 5ba:	39 83       	std	Y+1, r19	; 0x01
 5bc:	28 83       	st	Y, r18
 5be:	3a c0       	rjmp	.+116    	; 0x634 <malloc+0x128>
 5c0:	20 91 d0 00 	lds	r18, 0x00D0
 5c4:	30 91 d1 00 	lds	r19, 0x00D1
 5c8:	23 2b       	or	r18, r19
 5ca:	41 f4       	brne	.+16     	; 0x5dc <malloc+0xd0>
 5cc:	20 91 62 00 	lds	r18, 0x0062
 5d0:	30 91 63 00 	lds	r19, 0x0063
 5d4:	30 93 d1 00 	sts	0x00D1, r19
 5d8:	20 93 d0 00 	sts	0x00D0, r18
 5dc:	20 91 60 00 	lds	r18, 0x0060
 5e0:	30 91 61 00 	lds	r19, 0x0061
 5e4:	21 15       	cp	r18, r1
 5e6:	31 05       	cpc	r19, r1
 5e8:	41 f4       	brne	.+16     	; 0x5fa <malloc+0xee>
 5ea:	2d b7       	in	r18, 0x3d	; 61
 5ec:	3e b7       	in	r19, 0x3e	; 62
 5ee:	40 91 64 00 	lds	r20, 0x0064
 5f2:	50 91 65 00 	lds	r21, 0x0065
 5f6:	24 1b       	sub	r18, r20
 5f8:	35 0b       	sbc	r19, r21
 5fa:	e0 91 d0 00 	lds	r30, 0x00D0
 5fe:	f0 91 d1 00 	lds	r31, 0x00D1
 602:	e2 17       	cp	r30, r18
 604:	f3 07       	cpc	r31, r19
 606:	a0 f4       	brcc	.+40     	; 0x630 <malloc+0x124>
 608:	2e 1b       	sub	r18, r30
 60a:	3f 0b       	sbc	r19, r31
 60c:	28 17       	cp	r18, r24
 60e:	39 07       	cpc	r19, r25
 610:	78 f0       	brcs	.+30     	; 0x630 <malloc+0x124>
 612:	ac 01       	movw	r20, r24
 614:	4e 5f       	subi	r20, 0xFE	; 254
 616:	5f 4f       	sbci	r21, 0xFF	; 255
 618:	24 17       	cp	r18, r20
 61a:	35 07       	cpc	r19, r21
 61c:	48 f0       	brcs	.+18     	; 0x630 <malloc+0x124>
 61e:	4e 0f       	add	r20, r30
 620:	5f 1f       	adc	r21, r31
 622:	50 93 d1 00 	sts	0x00D1, r21
 626:	40 93 d0 00 	sts	0x00D0, r20
 62a:	81 93       	st	Z+, r24
 62c:	91 93       	st	Z+, r25
 62e:	02 c0       	rjmp	.+4      	; 0x634 <malloc+0x128>
 630:	e0 e0       	ldi	r30, 0x00	; 0
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	cf 01       	movw	r24, r30
 636:	df 91       	pop	r29
 638:	cf 91       	pop	r28
 63a:	08 95       	ret

0000063c <free>:
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
 640:	00 97       	sbiw	r24, 0x00	; 0
 642:	09 f4       	brne	.+2      	; 0x646 <free+0xa>
 644:	87 c0       	rjmp	.+270    	; 0x754 <free+0x118>
 646:	fc 01       	movw	r30, r24
 648:	32 97       	sbiw	r30, 0x02	; 2
 64a:	13 82       	std	Z+3, r1	; 0x03
 64c:	12 82       	std	Z+2, r1	; 0x02
 64e:	c0 91 d2 00 	lds	r28, 0x00D2
 652:	d0 91 d3 00 	lds	r29, 0x00D3
 656:	20 97       	sbiw	r28, 0x00	; 0
 658:	81 f4       	brne	.+32     	; 0x67a <free+0x3e>
 65a:	20 81       	ld	r18, Z
 65c:	31 81       	ldd	r19, Z+1	; 0x01
 65e:	28 0f       	add	r18, r24
 660:	39 1f       	adc	r19, r25
 662:	80 91 d0 00 	lds	r24, 0x00D0
 666:	90 91 d1 00 	lds	r25, 0x00D1
 66a:	82 17       	cp	r24, r18
 66c:	93 07       	cpc	r25, r19
 66e:	79 f5       	brne	.+94     	; 0x6ce <free+0x92>
 670:	f0 93 d1 00 	sts	0x00D1, r31
 674:	e0 93 d0 00 	sts	0x00D0, r30
 678:	6d c0       	rjmp	.+218    	; 0x754 <free+0x118>
 67a:	de 01       	movw	r26, r28
 67c:	20 e0       	ldi	r18, 0x00	; 0
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	ae 17       	cp	r26, r30
 682:	bf 07       	cpc	r27, r31
 684:	50 f4       	brcc	.+20     	; 0x69a <free+0x5e>
 686:	12 96       	adiw	r26, 0x02	; 2
 688:	4d 91       	ld	r20, X+
 68a:	5c 91       	ld	r21, X
 68c:	13 97       	sbiw	r26, 0x03	; 3
 68e:	9d 01       	movw	r18, r26
 690:	41 15       	cp	r20, r1
 692:	51 05       	cpc	r21, r1
 694:	09 f1       	breq	.+66     	; 0x6d8 <free+0x9c>
 696:	da 01       	movw	r26, r20
 698:	f3 cf       	rjmp	.-26     	; 0x680 <free+0x44>
 69a:	b3 83       	std	Z+3, r27	; 0x03
 69c:	a2 83       	std	Z+2, r26	; 0x02
 69e:	40 81       	ld	r20, Z
 6a0:	51 81       	ldd	r21, Z+1	; 0x01
 6a2:	84 0f       	add	r24, r20
 6a4:	95 1f       	adc	r25, r21
 6a6:	8a 17       	cp	r24, r26
 6a8:	9b 07       	cpc	r25, r27
 6aa:	71 f4       	brne	.+28     	; 0x6c8 <free+0x8c>
 6ac:	8d 91       	ld	r24, X+
 6ae:	9c 91       	ld	r25, X
 6b0:	11 97       	sbiw	r26, 0x01	; 1
 6b2:	84 0f       	add	r24, r20
 6b4:	95 1f       	adc	r25, r21
 6b6:	02 96       	adiw	r24, 0x02	; 2
 6b8:	91 83       	std	Z+1, r25	; 0x01
 6ba:	80 83       	st	Z, r24
 6bc:	12 96       	adiw	r26, 0x02	; 2
 6be:	8d 91       	ld	r24, X+
 6c0:	9c 91       	ld	r25, X
 6c2:	13 97       	sbiw	r26, 0x03	; 3
 6c4:	93 83       	std	Z+3, r25	; 0x03
 6c6:	82 83       	std	Z+2, r24	; 0x02
 6c8:	21 15       	cp	r18, r1
 6ca:	31 05       	cpc	r19, r1
 6cc:	29 f4       	brne	.+10     	; 0x6d8 <free+0x9c>
 6ce:	f0 93 d3 00 	sts	0x00D3, r31
 6d2:	e0 93 d2 00 	sts	0x00D2, r30
 6d6:	3e c0       	rjmp	.+124    	; 0x754 <free+0x118>
 6d8:	d9 01       	movw	r26, r18
 6da:	13 96       	adiw	r26, 0x03	; 3
 6dc:	fc 93       	st	X, r31
 6de:	ee 93       	st	-X, r30
 6e0:	12 97       	sbiw	r26, 0x02	; 2
 6e2:	4d 91       	ld	r20, X+
 6e4:	5d 91       	ld	r21, X+
 6e6:	a4 0f       	add	r26, r20
 6e8:	b5 1f       	adc	r27, r21
 6ea:	ea 17       	cp	r30, r26
 6ec:	fb 07       	cpc	r31, r27
 6ee:	79 f4       	brne	.+30     	; 0x70e <free+0xd2>
 6f0:	80 81       	ld	r24, Z
 6f2:	91 81       	ldd	r25, Z+1	; 0x01
 6f4:	84 0f       	add	r24, r20
 6f6:	95 1f       	adc	r25, r21
 6f8:	02 96       	adiw	r24, 0x02	; 2
 6fa:	d9 01       	movw	r26, r18
 6fc:	11 96       	adiw	r26, 0x01	; 1
 6fe:	9c 93       	st	X, r25
 700:	8e 93       	st	-X, r24
 702:	82 81       	ldd	r24, Z+2	; 0x02
 704:	93 81       	ldd	r25, Z+3	; 0x03
 706:	13 96       	adiw	r26, 0x03	; 3
 708:	9c 93       	st	X, r25
 70a:	8e 93       	st	-X, r24
 70c:	12 97       	sbiw	r26, 0x02	; 2
 70e:	e0 e0       	ldi	r30, 0x00	; 0
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	8a 81       	ldd	r24, Y+2	; 0x02
 714:	9b 81       	ldd	r25, Y+3	; 0x03
 716:	00 97       	sbiw	r24, 0x00	; 0
 718:	19 f0       	breq	.+6      	; 0x720 <free+0xe4>
 71a:	fe 01       	movw	r30, r28
 71c:	ec 01       	movw	r28, r24
 71e:	f9 cf       	rjmp	.-14     	; 0x712 <free+0xd6>
 720:	ce 01       	movw	r24, r28
 722:	02 96       	adiw	r24, 0x02	; 2
 724:	28 81       	ld	r18, Y
 726:	39 81       	ldd	r19, Y+1	; 0x01
 728:	82 0f       	add	r24, r18
 72a:	93 1f       	adc	r25, r19
 72c:	20 91 d0 00 	lds	r18, 0x00D0
 730:	30 91 d1 00 	lds	r19, 0x00D1
 734:	28 17       	cp	r18, r24
 736:	39 07       	cpc	r19, r25
 738:	69 f4       	brne	.+26     	; 0x754 <free+0x118>
 73a:	30 97       	sbiw	r30, 0x00	; 0
 73c:	29 f4       	brne	.+10     	; 0x748 <free+0x10c>
 73e:	10 92 d3 00 	sts	0x00D3, r1
 742:	10 92 d2 00 	sts	0x00D2, r1
 746:	02 c0       	rjmp	.+4      	; 0x74c <free+0x110>
 748:	13 82       	std	Z+3, r1	; 0x03
 74a:	12 82       	std	Z+2, r1	; 0x02
 74c:	d0 93 d1 00 	sts	0x00D1, r29
 750:	c0 93 d0 00 	sts	0x00D0, r28
 754:	df 91       	pop	r29
 756:	cf 91       	pop	r28
 758:	08 95       	ret

0000075a <strcmp>:
 75a:	fb 01       	movw	r30, r22
 75c:	dc 01       	movw	r26, r24
 75e:	8d 91       	ld	r24, X+
 760:	01 90       	ld	r0, Z+
 762:	80 19       	sub	r24, r0
 764:	01 10       	cpse	r0, r1
 766:	d9 f3       	breq	.-10     	; 0x75e <strcmp+0x4>
 768:	99 0b       	sbc	r25, r25
 76a:	08 95       	ret

0000076c <_exit>:
 76c:	f8 94       	cli

0000076e <__stop_program>:
 76e:	ff cf       	rjmp	.-2      	; 0x76e <__stop_program>
